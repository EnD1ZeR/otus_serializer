using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

namespace Serializer.Reflection.Extensions
{
    public static class TypeExtensions
    {
        public static IEnumerable<MemberInfo> GetFieldsAndProperties(this Type type, bool includeAutoGenerated = false)
        {
            BindingFlags bindingAttr = BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly;
            var members = type.GetFields(bindingAttr).Where(f => !f.IsNotSerialized).Cast<MemberInfo>()
                .Concat(type.GetProperties(bindingAttr).Where(p => p.GetGetMethod(true) != null && p.GetSetMethod(true) != null));

            if (!includeAutoGenerated)
            {
                members = members.Where(member =>
                    member.CustomAttributes.All(a => a.AttributeType != typeof(CompilerGeneratedAttribute)));
            }

            return members;
        }

        public static bool IsSimpleType(this Type type)
        {
            return
                type.IsPrimitive ||
                new Type[] {
                    typeof(string),
                    typeof(decimal),
                    typeof(DateTime),
                    typeof(DateTimeOffset),
                    typeof(TimeSpan),
                    typeof(Guid)
                }.Contains(type) ||
                type.IsEnum ||
                Convert.GetTypeCode(type) != TypeCode.Object ||
                (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>) && IsSimpleType(type.GetGenericArguments()[0]));
        }

    }
}
